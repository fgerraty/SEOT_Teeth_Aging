---
author: "Frankie Gerraty"
toc: true
toc-expand: 2
toc-depth: 2
number-sections: true
format:
  html:
    embed-resources: true
    code-background: true
---

# Precision of Northern Sea Otter Aging using Tooth Cementum Annuli Analysis {.unnumbered}

## Introduction

For the last couple years, we have submitted multiple teeth from the same individual sea otter carcasses to Matson's labs to assess precision of aging via cementum annuli analysis. In this document, I outline preliminary results of this exploratory investigation.

We submitted teeth from four general tooth type categories: Molars, Premolars, Canines, Incisors. These teeth originated from two regions: Katmai National Park and Western Prince William Sound.

### Sample Size of Aged Teeth by Predictor {.unnumbered}

| Molars | Premolars | Canines | Incisors |
|--------|-----------|---------|----------|
| 31     | 65        | 30      | 29       |

| Katmai National Park | Western Prince William Sound |
|----------------------|------------------------------|
| 120                  | 39                           |

| 2006 | 2007 | 2008 | 2013 | 2019 | 2021 | 2022 |
|------|------|------|------|------|------|------|
| 2    | 6    | 6    | 6    | 23   | 22   | 94   |

## Data Import and Cleaning

In the following code chunk, I import the raw dataset and undergo several cleaning steps including filtering out unknown tooth types, unsuccessfully aged teeth, and individuals with teeth aged in different years (i.e. recaptures).

```{r}
#| code-fold: TRUE


###############################################
# Part 0: Load packages #######################
###############################################

# Load packages
packages<- c("tidyverse", "readxl", "janitor", "lme4", "AICcmodavg", "viridis", "ggthemes")

pacman::p_load(packages, character.only = TRUE)


###############################################
# Part 1: Load raw dataset ####################
###############################################

SEOT_teeth_raw <- read_excel(here::here("data/raw/SEOT_teeth_raw.xlsx"))

###############################################
# Part 2: Clean and summarize datasets ########
###############################################

# Part 2A: Categorize tooth types (premolars, canines, incisors, molars, or unknown) ----
P <- c("P2a","P2b","P2","Pa","Pb","P","UP","LLP2","URP3","URP2","ULP3","ULP2","URP2 or ULP2","P2, additional tooth sent in 2023","LRP2","URP4")
C <- c("C","URC","LRC","ULC","ULC (BROKEN)")
I <- c("URI3","URI1","I3","ULI3","LLI2","LLI1","LRI2","UI1?","I2","UI2","LRI1")
M <- c("M","URM1","LRM1","ULM1","M2")
UNK <- c("UNK", "UNKa", "UNKb")


# Part 2B: Generate clean, single-tooth dataset ----------------------------------------
SEOT_teeth <- SEOT_teeth_raw %>% 
  clean_names()%>% 
#Remove individuals with no teeth collected and/or no ages calculated due to tooth damage
  filter(tooth_collected == "Y",
         otter_num != "SOD-2021-200", #individual with tooth damage (couldnt be aged)
         otter_num != "KEFJ-SOD-2014-01",#individual with certainty code missing
         otter_num != "SOD-2006-17/ capture otter SO-05-04",
         otter_num != "SOD-2007-02/capture otter SO-01-01", #teeth pulled different years
         otter_num != "SOD-2007-01/ capture otter SO-04-24", #teeth pulled different years
         otter_num != "WPWS-SOD-2014-02/ capture otter SO-2010-08" #teeth pulled different years
         ) %>% 
#Categorize teeth to broad categories
  mutate(tooth_category = 
           #categorize all unknown teeth as "UNK"           
           case_when(tooth %in% UNK ~ "UNK",
                     tooth %in% C ~ "C",
                     tooth %in% P ~ "P",
                     tooth %in% I ~ "I",
                     tooth %in% M ~ "M")) %>% 
#keep only relevant columns
  select(year, collection_date, 
         otter_id = otter_num,
         tooth_id = tooth_num, 
         area, age, age_class, certainty_code, matson_min, matson_max, matson_notes, sex, tooth_category, latitude, longitude)

# Part 2C: Generate clean, 2-tooth dataset ----------------------------------------------

tooth_age_comparison <- SEOT_teeth %>% 
  select(otter_id, age, age_class, certainty_code, tooth_category) %>% 
  #Group by otter ID and then create a new line for each combination of 2 teeth within the same otter
  group_by(otter_id) %>% 
  reframe(age = t(combn(age, 2)),
          age_class = t(combn(age_class, 2)),
          certainty_code = t(combn(certainty_code, 2)),
          tooth_category = t(combn(tooth_category, 2))) %>% 
  #Extract values from list objects
  mutate(age1 = age[,1],
         age2 = age[,2],
         age_class1 = age_class[,1],
         age_class2 = age_class[,2],
         certainty_code1 = certainty_code[,1],
         certainty_code2 = certainty_code[,2],
         tooth_category1 = tooth_category[,1],
         tooth_category2 = tooth_category[,2]) %>% 
  #Remove listed objects (redundant)
  select(-age,-age_class,-certainty_code,-tooth_category) %>% 
  #Calculate binary (1/0) response of same age and age class values
  mutate(age_agreement = if_else(age1 == age2, 1,0),
         age_class_agreement =if_else(age_class1 == age_class2, 1,0)) %>% 
  #Generate certainty_code combinations 
  mutate(certainty_code_combo = case_when(
    certainty_code1 == "A" & certainty_code2 == "A" ~ "AA",
    certainty_code1 == "A" & certainty_code2 == "B" ~ "AB",
    certainty_code1 == "B" & certainty_code2 == "A" ~ "AB",
    certainty_code1 == "A" & certainty_code2 == "C" ~ "AC",
    certainty_code1 == "C" & certainty_code2 == "A" ~ "AC",
    certainty_code1 == "B" & certainty_code2 == "B" ~ "BB",
    certainty_code1 == "B" & certainty_code2 == "C" ~ "BC",
    certainty_code1 == "C" & certainty_code2 == "B" ~ "BC",
    certainty_code1 == "C" & certainty_code2 == "C" ~ "CC",
    TRUE ~ NA_character_)) %>%
  #Generate tooth_category combinations
  mutate(tooth_category_combo = case_when(
    tooth_category1 == "M" & tooth_category2 == "M" ~ "MM",
    tooth_category1 == "M" & tooth_category2 == "P" ~ "MP",
    tooth_category1 == "M" & tooth_category2 == "C" ~ "MC",
    tooth_category1 == "M" & tooth_category2 == "I" ~ "MI",
    tooth_category1 == "P" & tooth_category2 == "M" ~ "MP",
    tooth_category1 == "P" & tooth_category2 == "P" ~ "PP",
    tooth_category1 == "P" & tooth_category2 == "C" ~ "PC",
    tooth_category1 == "P" & tooth_category2 == "I" ~ "PI",
    tooth_category1 == "C" & tooth_category2 == "M" ~ "MC",
    tooth_category1 == "C" & tooth_category2 == "P" ~ "PC",
    tooth_category1 == "C" & tooth_category2 == "C" ~ "CC",
    tooth_category1 == "C" & tooth_category2 == "I" ~ "CI",
    tooth_category1 == "I" & tooth_category2 == "M" ~ "MI",
    tooth_category1 == "I" & tooth_category2 == "P" ~ "PI",
    tooth_category1 == "I" & tooth_category2 == "C" ~ "CI",
    tooth_category1 == "I" & tooth_category2 == "I" ~ "II",
    tooth_category1 == "UNK" | tooth_category2 == "UNK" ~ "UNK",
    TRUE ~ NA_character_))%>% 
  mutate(certainty_category = if_else(certainty_code_combo == "AA", "High", "Low")) %>% 
  #Bring predictors (year, region) into dataframe
  left_join(., unique(SEOT_teeth[,c(1,3,5)]), by="otter_id")
```

## Assessing Drivers of Aging Uncertainty

In the cementum annuli aging process, individuals who age the teeth assign a certainty code that is used for assessing the reliability of the age for a given tooth. The certainty codes are:

**A = High:** Reliability ages indicate that the cementum characteristics of the tooth section very nearly match those of the standardized cementum aging model for the species and tooth type. Most certain, within +/- 1 year of reported toothage.

**B = Medium:** There is histological evidence to support the result, and the correct age is expected to be within the range given in the "Notes" field. Usually age within +/- 2 years of reported tooth age.

**C = Low:** Those for which the match between histological evidence and the standardized model is poor. Error is likely, and may occur within the range given.

### How do the levels of uncertainty break down by our various predictors? {.unnumbered}

1.  **Tooth Type**

```{r}
#| code-fold: TRUE
#| warning: FALSE

###############################################################################
# Part 2: Uncertainty by Different Variables ##################################
###############################################################################

pal = c("A" = "#0072b2", "B" = "#009e73", "C" = "#d55e00")

# Uncertainty by tooth type plot and table ------------------------------------
tooth_type <- SEOT_teeth %>% 
  group_by(tooth_category, certainty_code) %>% 
  summarise(n=n()) %>% 
  mutate(freq = n/sum(n), #calculate frequency of each uncertainty level
         tooth_category = factor(tooth_category, levels = c("M", "P", "C", "I")),
         certainty_code = factor(certainty_code, levels = c("C", "B", "A")),
         n_category = sum(n)) %>% 
  ungroup() %>% 
  filter(tooth_category != "UNK") #remove unknown teeth

ggplot(tooth_type, aes(x=tooth_category, y=freq))+
  geom_bar(aes(fill=certainty_code), position = "fill", stat='identity')+
  scale_fill_manual(values = pal, breaks = c("A", "B", "C"), labels = c("A (low)", "B (medium)", "C (high)"))+
  theme_classic()+
  labs(y="Frequency of Uncertainty Level", x="Tooth Type", fill = "Uncertainty Level")+
  geom_text(aes(label = paste(n), group = certainty_code), position = position_stack(vjust = 0.5), color = "white")+
  scale_x_discrete(labels = c("Molar", "Premolar", "Canine", "Incisor"))
```

2.  **Area**

    ```{r}
    #| code-fold: TRUE
    #| warning: FALSE

    #Uncertainty by area ----------------------------------------------------------
    area <- SEOT_teeth %>% 
      group_by(area, certainty_code) %>% 
      summarise(n=n()) %>% 
      mutate(freq = n/sum(n),
             n_area = sum(n),
             certainty_code = factor(certainty_code, levels = c("C", "B", "A"))) %>%  
      ungroup() 


    ggplot(area, aes(x=area, y=freq))+
      geom_bar(aes(fill=certainty_code), position = "fill", stat='identity')+
      scale_fill_manual(values = pal, breaks = c("A", "B", "C"), labels = c("A (low)", "B (medium)", "C (high)"))+
      theme_classic()+
      geom_text(aes(label = paste(n), group = certainty_code), position = position_stack(vjust = 0.5), color = "white")+
      labs(y="Frequency of Uncertainty Level", x="Region", fill = "Uncertainty Level")
      

    ```

3.  **Year**

    ```{r}
    #| code-fold: TRUE
    #| warning: FALSE

    #Uncertainty by year ----------------------------------------------------------
    year <- SEOT_teeth %>% 
      group_by(year, certainty_code) %>% 
      summarise(n=n()) %>% 
      mutate(freq = n/sum(n),
             year = as.character(year),
             certainty_code = factor(certainty_code, levels = c("C", "B", "A"))) %>%
      ungroup() 


    ggplot(year, aes(x=year, y=freq))+
      geom_bar(aes(fill=certainty_code), position = "fill", stat='identity')+
      scale_fill_manual(values = pal, breaks = c("A", "B", "C"), labels = c("A (low)", "B (medium)", "C (high)"))+
      theme_classic()+
      geom_text(aes(label = paste(n), group = certainty_code), position = position_stack(vjust = 0.5), color = "white")+
      labs(y="Frequency of Uncertainty Level", x="Year", fill = "Uncertainty Level")
    ```

## Assessing Drivers of Aging Precision

We measured precision in two ways:

-   probability that teeth from the same otter were given the same age via tooth cementum annuli analysis.

-   probability that teeth from the same otter were given the same age class.

### How Does Precision Break Down by Predictor? {.unnumbered}

1.  **Tooth Aging Certainty Score**

```{r}
#| code-fold: TRUE
#| warning: FALSE

###############################################################################
# Part 2: Precision by Different Variables ####################################
###############################################################################

tooth_comparison_certainty_summary <- tooth_age_comparison %>% 
  group_by(certainty_code_combo) %>% 
  summarise(n = n(),
            n_age_agreement = sum(age_agreement),
            n_age_class_agreement = sum(age_class_agreement)) %>% 
  adorn_totals("row") %>% 
  ungroup() %>% 
  pivot_longer(cols = c(n_age_agreement, n_age_class_agreement))%>% 
  mutate(freq= value/n)
 
fct_labels <- c("n_age_agreement" = "Frequency Age Agreement", "n_age_class_agreement" = "Frequency Age Class Agreement")


ggplot(tooth_comparison_certainty_summary, aes(certainty_code_combo, freq, fill = certainty_code_combo, label = paste(value, "/", n)))+
  geom_bar(stat='identity')+
  facet_grid(rows = "name", scales = "free", switch="y", labeller = as_labeller(fct_labels))+
  theme_few()+
  scale_fill_viridis_d()+
  geom_text(vjust = -0.5)+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
  labs(y = "", x = "", fill = "Certainty Code \nCombination")+
  theme(strip.placement.y = "outside",
        strip.text.y = element_text(face = "bold"))
```

2.  **Tooth Type Combinations**

```{r}
#| code-fold: TRUE
#| warning: FALSE

# Tooth Type Combination ------------------------------------------------------

tooth_combo_certainty <- tooth_age_comparison %>% 
  group_by(tooth_category_combo) %>% 
  summarise(n = n(),
            n_age_agreement = sum(age_agreement),
            n_age_class_agreement = sum(age_class_agreement)) %>% 
  mutate(tooth_category_combo = factor(tooth_category_combo, 
                                             levels = c("MP","MC","MI","PP","PC","PI","CI","UNK"))) %>%  
  filter(tooth_category_combo != "UNK") %>% 
  adorn_totals("row") %>% 
  ungroup() %>% 
  pivot_longer(cols = c(n_age_agreement, n_age_class_agreement))%>% 
  mutate(freq= value/n)



ggplot(tooth_combo_certainty, aes(tooth_category_combo, freq, fill = tooth_category_combo, label = paste(value, "/", n)))+
  geom_bar(stat='identity')+
  facet_grid(rows = "name", scales = "free", switch="y", labeller = as_labeller(fct_labels))+
  theme_few()+
  scale_fill_viridis_d()+
  geom_text(vjust = -0.5)+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
  labs(y = "", x = "", fill = "Tooth Type \nCombination")+
  theme(strip.placement.y = "outside",
        strip.text.y = element_text(face = "bold"))
```

3.  **Area**

```{r}
#| code-fold: TRUE
#| warning: FALSE

area_certainty <- tooth_age_comparison %>% 
  group_by(area) %>% 
  summarise(n = n(),
            n_age_agreement = sum(age_agreement),
            n_age_class_agreement = sum(age_class_agreement)) %>% 
  adorn_totals("row") %>% 
  mutate(area = factor(area, levels = c("KATM", "WPWS", "Total"))) %>% 
  ungroup() %>% 
  pivot_longer(cols = c(n_age_agreement, n_age_class_agreement))%>% 
  mutate(freq= value/n)



ggplot(area_certainty, aes(area, freq, fill = area, label = paste(value, "/", n)))+
  geom_bar(stat='identity')+
  facet_grid(rows = "name", scales = "free", switch="y", labeller = as_labeller(fct_labels))+
  theme_few()+
  scale_fill_viridis_d()+
  geom_text(vjust = -0.5)+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
  labs(y = "", x = "", fill = "Area")+
  theme(strip.placement.y = "outside",
        strip.text.y = element_text(face = "bold"))
```

4.  **Year**

```{r}
#| code-fold: TRUE
#| warning: FALSE

# Year ------------------------------------------------------

year_certainty <- tooth_age_comparison %>% 
  group_by(year) %>% 
  summarise(n = n(),
            n_age_agreement = sum(age_agreement),
            n_age_class_agreement = sum(age_class_agreement)) %>% 
  adorn_totals("row") %>% 
  ungroup() %>% 
  pivot_longer(cols = c(n_age_agreement, n_age_class_agreement))%>% 
  mutate(freq= value/n)


ggplot(year_certainty, aes(year, freq, fill = year, label = paste(value, "/", n)))+
  geom_bar(stat='identity')+
  facet_grid(rows = "name", scales = "free", switch="y", labeller = as_labeller(fct_labels))+
  theme_few()+
  scale_fill_viridis_d()+
  geom_text(vjust = -0.5)+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
  labs(y = "", x = "", fill = "Year")+
  theme(strip.placement.y = "outside",
        strip.text.y = element_text(face = "bold"))

```

### Modeling Drivers of Precision {.unnumbered}

Unfortunately, due to small sample sizes, perhaps coding errors, and the fact that the drivers of aging precision are not super apparent, none of the models I have generated to date have had significant predictor effects. Here is some of what I have tried:

**Age Agreement**

Assessinfg predictors of age agreement using mixed-effects logistic regression (binomial distribution, logit link) with otter_id as a random effect.

-   Generate Models

```{r}
#| code-fold: TRUE
#| warning: FALSE
#| output: FALSE

temp <- tooth_age_comparison %>% 
#  filter(certainty_code_combo == "AA"|
#           certainty_code_combo == "AB"|
#           certainty_code_combo == "BB") %>% 
  filter(tooth_category_combo != "UNK") %>% 
  filter(year == "2019" |
           year == "2021" |
           year == "2022") %>% 
  mutate(year = as.character(year))

# Test for correlations among predictors ---------------------------------------
chisq.test(temp$certainty_category, temp$tooth_category_combo, simulate.p.value = TRUE)
chisq.test(temp$certainty_category, temp$area, simulate.p.value = TRUE)
chisq.test(temp$certainty_category, temp$year, simulate.p.value = TRUE)
chisq.test(temp$tooth_category_combo, temp$area, simulate.p.value = TRUE)
chisq.test(temp$tooth_category_combo, temp$year, simulate.p.value = TRUE)
chisq.test(temp$area, temp$year, simulate.p.value = TRUE)
#As we can tell, "area" and "year" are significantly correlated, and "tooth_category_combo" and "year are significantly correlated

#Generate models with non-colinear predictors ----------------------------------
f1 <- glmer(age_agreement ~ certainty_category + (1 | otter_id), family = binomial, data = temp);summary(f1)
f2 <- glmer(age_agreement ~ tooth_category_combo + (1 | otter_id), family = binomial, data = temp); summary(f2)
f3 <- glmer(age_agreement ~ area + (1 | otter_id), family = binomial, data = temp); summary(f3)
f4 <- glmer(age_agreement ~ year + (1 | otter_id), family = binomial, data = temp); summary(f4)
f5 <- glmer(age_agreement ~ certainty_category + area + (1 | otter_id), family = binomial, data = temp); summary(f5)
f6 <- glmer(age_agreement ~ certainty_category + year + (1 | otter_id), family = binomial, data = temp); summary(f6)
null <- glmer(age_agreement ~ 1 + (1 | otter_id), family = binomial, data = temp); summary(null)

#These models threw errors! 
#f5 <- glmer(age_agreement ~ certainty_category + tooth_category_combo + (1 | otter_id), family = binomial, data = temp); summary(f5)
#f8 <- glmer(age_agreement ~ tooth_category_combo + area + (1 | otter_id), family = binomial, data = temp); summary(f8)
#f11 <- glmer(age_agreement ~ certainty_category + tooth_category_combo + area + (1 | otter_id), family = binomial, data = temp); summary(f11)
```

-   Compare models using AICc

```{r}
cand.mod.names <- c("f1", "f2", "f3", "f4", "f5", "f6", "null") 
cand.mods <- list( ) 

# This function fills the list by model names
for(i in 1:length(cand.mod.names)) {
  cand.mods[[i]] <- get(cand.mod.names[i]) }

# Function aictab does the AICc-based model comparison
print(aictab(cand.set = cand.mods, 
             modnames = cand.mod.names))
```

**Age Class Agreement**

-   Generate Models

    ```{r}
    #| code-fold: TRUE
    #| warning: FALSE
    #| output: FALSE

    #Generate models with non-colinear predictors

    g1 <- glmer(age_class_agreement ~ certainty_category + (1 | otter_id), family = binomial, data = temp);summary(g1)
    g2 <- glmer(age_class_agreement ~ tooth_category_combo + (1 | otter_id), family = binomial, data = temp); summary(g2)
    g3 <- glmer(age_class_agreement ~ area + (1 | otter_id), family = binomial, data = temp); summary(g3)
    g4 <- glmer(age_class_agreement ~ year + (1 | otter_id), family = binomial, data = temp); summary(g4)
    g5 <- glmer(age_class_agreement ~ certainty_category + area + (1 | otter_id), family = binomial, data = temp); summary(g5)
    g6 <- glmer(age_class_agreement ~ certainty_category + year + (1 | otter_id), family = binomial, data = temp); summary(g6)
    null <- glmer(age_class_agreement ~ 1 + (1 | otter_id), family = binomial, data = temp); summary(null)
    ```

<!-- -->

-   Compare models using AICc

```{r}
cand.mod.names <- c("g1", "g2", "g3", "g4", "g5", "g6", "null")
cand.mods <- list( ) 

# This function fills the list by model names
for(i in 1:length(cand.mod.names)) {
  cand.mods[[i]] <- get(cand.mod.names[i]) }

# Function aictab does the AICc-based model comparison
print(aictab(cand.set = cand.mods, 
             modnames = cand.mod.names))
```

These outputs suggest that none of the predictors performed significantly better than a null model. ....not exactly sure where to go from here.
